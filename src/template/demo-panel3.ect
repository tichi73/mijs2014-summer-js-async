<% extend 'demo-panel-base.ect' %>
<div class="demo-description">
<h3>jQuery.Deferred オブジェクトによる非同期処理</h3>
<p>
ここで非同期処理に jQuery.Deferred オブジェクトを使う方法を紹介します。
</p>
<p>
先ほどと同じ delay という非同期処理を、内部で jQuery.Deferred オブジェクトを生成し、
その Promise オブジェクト（Deferred に内包されている）を返す、
という実装に書き換えます。
そして、非同期処理が完了した時点で Deferred オブジェクトの resolve() を呼び出すようにしておきます。
<p>
<p>
これで delay は Deferred インターフェースを持つことになり、
.then() というメソッドで非同期処理を連結できるようになります。
</p>
</div>
<script type="text/javascript">
$(function(){
	var panel = $("#<%- @panel_id %>");
	var btn = panel.find('.btn.btn-primary');
	var content = panel.find('.panel-content');	
	var timeout = 3000;

	function delay() {
		/* Deferred オブジェクトを生成する */
		var deferred = new $.Deferred;
		setTimeout(function(){
			content.text(content.text() + timeout + "ms経過... ");
			/* 非同期処理が完了したときに resolve() を呼び出す */
			deferred.resolve();
		}, timeout);
		/* Deferred の Promise オブジェクトを返す */
		return deferred.promise();
	}

	btn.click(function(){
		btn.prop('disabled', true);
		content.text("実行ボタンが押されました... ")
		delay()
		.then(delay)
		.then(delay)
		.then(function(){
			content.text(content.text() + "完了!");
			btn.prop('disabled', false);
		});

	});
});
</script>
